# Generated by Django 3.1.4 on 2020-12-16 03:02

import ai.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Move',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moveY', models.IntegerField(blank=True, null=True)),
                ('moveX', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posXUser1', models.IntegerField()),
                ('posYUser1', models.IntegerField()),
                ('posXUser2', models.IntegerField()),
                ('posYUser2', models.IntegerField()),
                ('turn', ai.validators.MinMaxFloat()),
                ('game_sate', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None), size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Esperance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('esperance', ai.validators.MinMaxFloat()),
                ('move', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai.move')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai.state')),
            ],
        ),
        migrations.CreateModel(
            name='AI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('epsilon_greedy', ai.validators.MinMaxFloat()),
                ('learning_rate', ai.validators.MinMaxFloat()),
                ('gamma', ai.validators.MinMaxFloat()),
                ('states', models.ManyToManyField(to='ai.State')),
            ],
        ),
    ]
